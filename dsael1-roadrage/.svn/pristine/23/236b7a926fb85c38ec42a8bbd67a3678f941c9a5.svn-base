
package model;

import java.util.ArrayList;
import java.util.Map;
import java.util.Random;

/**
 * 
 * @author david
 * @version 10/25/18
 */
public class Taxi extends AbstractVehicle implements Vehicle {
    /**
     * 
     */
    private static final int DEATH_TIME = 15;

    /**
     * 
     * @param theX x coordinate value.
     * @param theY y coordinate value.
     * @param theDir direction value.
     */
    public Taxi(final int theX, final int theY, final Direction theDir) {
        super(theX, theY, theDir, DEATH_TIME);

    }
    /*
     * Taxis can only travel on streets and through lights and crosswalks. • A
     * taxi prefers to drive straight ahead if it can. If it cannot move
     * straight ahead, it turns left if possible; if it cannot turn left, it
     * turns right if possible; as a last resort, it turns around. • Taxis stop
     * for red lights; if a traffic light is immediately ahead of the taxi and
     * the light is red, the Taxi stays still and does not move until the light
     * turns green. It does not turn to avoid the light. When the light turns
     * green the taxi resumes its original direction. Taxis ignore yellow and
     * green lights. • Taxis stop for (temporarily) red crosswalk lights. If a
     * crosswalk light is immediately ahead of the taxi and the crosswalk light
     * is red, the Taxi stays still and does not move for 3 clock cycles or
     * until the crosswalk light turns green, whichever occurs first. It does
     * not turn to avoid the crosswalk light. When the crosswalk light turns
     * green, or after 3 clock cycles, whichever happens first, the taxi resumes
     * its original direction. A Taxi will drive through yellow or green
     * crosswalk lights without stopping
     */

    // Streets and crosswalks
    // straight, left, right, reverses
    // stops for red lights
    // ignores yellow and green lights
    // stops for red light crosswalks (temp),
    // drives through green and yellow crosswalk lights

    @Override
    public boolean canPass(final Terrain theTerrain, final Light theLight) {

        return theTerrain == Terrain.STREET
               || theTerrain == Terrain.CROSSWALK && theLight != Light.RED;
    }

    @Override
    public Direction chooseDirection(final Map<Direction, Terrain> theNeighbors) {

        final ArrayList<Direction> directionList =
                        new ArrayList<Direction>(theNeighbors.keySet());

        final int choice = new Random().nextInt(directionList.size());

        directionList.get(choice);

        if (theNeighbors.get(directionList.get(choice)) == Terrain.STREET) {

            return directionList.get(choice);

        } else if (theNeighbors.get(directionList.get(choice)) == Terrain.CROSSWALK) {

            return directionList.get(choice);

        }
        return directionList.get(choice);
    }

}
